name: Build & Release (Windows .exe + macOS .dmg)

on:
  push:
    tags:
      - "v*"                  # e.g. v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: "Tag to release (e.g. v1.0.1)"
        required: true
        type: string

permissions:
  contents: write             # needed to create tags/releases

jobs:
  build-windows:
    name: Build Windows EXE
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build .exe with PyInstaller (onefile, no console)
        run: |
          pyinstaller --onefile --windowed --name "PhotoAudit" photo_audit_gui.py
      - name: Show dist contents (debug)
        shell: bash
        run: ls -la dist
      - name: Verify exe exists
        shell: bash
        run: test -f "dist/PhotoAudit.exe"
      - name: Collect artifact
        shell: bash
        run: |
          mkdir -p artifacts
          cp "dist/PhotoAudit.exe" "artifacts/PhotoAudit-Windows.exe"
      - uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: artifacts/PhotoAudit-Windows.exe
          if-no-files-found: error

  build-macos:
    name: Build macOS DMG
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build .app with PyInstaller
        run: |
          pyinstaller --windowed --name "PhotoAudit" photo_audit_gui.py
      - name: Show dist contents (debug)
        run: ls -la dist
      - name: Verify app exists
        run: test -d "dist/PhotoAudit.app"
      - name: Install create-dmg
        run: brew install create-dmg
      - name: Create .dmg
        run: |
          mkdir -p artifacts
          create-dmg \
            --volname "PhotoAudit" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --icon "PhotoAudit.app" 175 200 \
            --app-drop-link 425 200 \
            "artifacts/PhotoAudit-macOS.dmg" \
            "dist/PhotoAudit.app"
      - uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: artifacts/PhotoAudit-macOS.dmg
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Determine TAG
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Use input (e.g., v1.0.1) for manual runs
            echo "TAG=${{ inputs.version }}" >> $GITHUB_ENV
          else
            # Use the pushed tag name
            echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          fi
          echo "Tag to release: ${TAG}"

      # Create the tag if this was a manual run (no tag ref)
      - name: Create tag (manual runs only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ env.TAG }}
          message: Release ${{ env.TAG }}

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-exe
          path: ./release

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-dmg
          path: ./release

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          files: |
            release/PhotoAudit-Windows.exe
            release/PhotoAudit-macOS.dmg
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
